// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using MspRoadShow.Api.Persistence;
using System;

namespace MspRoadShow.Api.Persistence.Migrations
{
    [DbContext(typeof(RoadShowContext))]
    [Migration("20180426142705_UpdateDB")]
    partial class UpdateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("msproadshow")
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MspRoadShow.Api.Business.Entities.Attendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Company")
                        .HasMaxLength(20);

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<bool>("IsAttendeePresented");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Position")
                        .HasMaxLength(20);

                    b.Property<int>("Score");

                    b.HasKey("Id");

                    b.ToTable("Attendees");
                });

            modelBuilder.Entity("MspRoadShow.Api.Business.Entities.AttendeeCity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AttendeesId");

                    b.Property<Guid>("CityId");

                    b.HasKey("Id");

                    b.HasIndex("AttendeesId")
                        .IsUnique();

                    b.HasIndex("CityId");

                    b.ToTable("AttendeeCity");
                });

            modelBuilder.Entity("MspRoadShow.Api.Business.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("EndDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("MspRoadShow.Api.Business.Entities.CitySponsor", b =>
                {
                    b.Property<Guid>("CityId");

                    b.Property<Guid>("SponsorId");

                    b.HasKey("CityId", "SponsorId");

                    b.HasIndex("SponsorId");

                    b.ToTable("CitySponsors");
                });

            modelBuilder.Entity("MspRoadShow.Api.Business.Entities.EvaluateQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answers");

                    b.Property<Guid>("CityId");

                    b.Property<bool>("IsMultipleChoisePossible");

                    b.Property<string>("Text")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("EvaluateQuestions");
                });

            modelBuilder.Entity("MspRoadShow.Api.Business.Entities.QuizzAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsCorrect");

                    b.Property<Guid>("QuestionId");

                    b.Property<string>("Text")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizzQuestionAnswers");
                });

            modelBuilder.Entity("MspRoadShow.Api.Business.Entities.QuizzQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsMultipleChoiseActive");

                    b.Property<Guid>("SpeechId");

                    b.Property<string>("Title")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("SpeechId");

                    b.ToTable("QuizzQuestions");
                });

            modelBuilder.Entity("MspRoadShow.Api.Business.Entities.Speaker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("Note");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(100);

                    b.Property<string>("SpeakerBio")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("MspRoadShow.Api.Business.Entities.Speech", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CityId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset>("EndTime");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Location")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("SpeakerId");

                    b.Property<DateTimeOffset>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("Speeches");
                });

            modelBuilder.Entity("MspRoadShow.Api.Business.Entities.SpeechAttendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AttendeeId");

                    b.Property<string>("Comment")
                        .HasMaxLength(200);

                    b.Property<decimal?>("Rating");

                    b.Property<Guid>("SpeechId");

                    b.HasKey("Id");

                    b.HasIndex("AttendeeId");

                    b.HasIndex("SpeechId", "AttendeeId");

                    b.ToTable("SpeechAttendees");
                });

            modelBuilder.Entity("MspRoadShow.Api.Business.Entities.Sponsor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActiveSponsor");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SponsorLevel")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Sponsors");
                });

            modelBuilder.Entity("MspRoadShow.Api.Business.Entities.AttendeeCity", b =>
                {
                    b.HasOne("MspRoadShow.Api.Business.Entities.Attendee", "Attendee")
                        .WithOne("City")
                        .HasForeignKey("MspRoadShow.Api.Business.Entities.AttendeeCity", "AttendeesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MspRoadShow.Api.Business.Entities.City", "City")
                        .WithMany("Attendees")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MspRoadShow.Api.Business.Entities.CitySponsor", b =>
                {
                    b.HasOne("MspRoadShow.Api.Business.Entities.City", "City")
                        .WithMany("SponsorList")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MspRoadShow.Api.Business.Entities.Sponsor", "Sponsor")
                        .WithMany("CitiesList")
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MspRoadShow.Api.Business.Entities.EvaluateQuestion", b =>
                {
                    b.HasOne("MspRoadShow.Api.Business.Entities.City", "City")
                        .WithMany("EvaluateQuestions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MspRoadShow.Api.Business.Entities.QuizzAnswer", b =>
                {
                    b.HasOne("MspRoadShow.Api.Business.Entities.QuizzQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MspRoadShow.Api.Business.Entities.QuizzQuestion", b =>
                {
                    b.HasOne("MspRoadShow.Api.Business.Entities.Speech", "Speech")
                        .WithMany("Questions")
                        .HasForeignKey("SpeechId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MspRoadShow.Api.Business.Entities.Speech", b =>
                {
                    b.HasOne("MspRoadShow.Api.Business.Entities.City")
                        .WithMany("Speeches")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MspRoadShow.Api.Business.Entities.Speaker", "Speaker")
                        .WithMany("SpeechList")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MspRoadShow.Api.Business.Entities.SpeechAttendee", b =>
                {
                    b.HasOne("MspRoadShow.Api.Business.Entities.Attendee", "Attendee")
                        .WithMany("SpeechesList")
                        .HasForeignKey("AttendeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MspRoadShow.Api.Business.Entities.Speech", "Speech")
                        .WithMany("AttendeesList")
                        .HasForeignKey("SpeechId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
